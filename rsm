#!/usr/bin/env bash


###########################################################
#
# This is main routing hub acting like a starting point
# for all other sub-scripts.
#
#                    -= Scenario 1 =-
# In case no arguments are provided, construct and display
# a list of options available to the user:
#
# 1. connect to remote host terminal
# 2. update package tree on remote host
# 3. upgrade dated packages on remote host
# q. quit
#
# Depending on the selected option, load action script and
# run without arguments. Wait for the exit code and
# self-reload until user explicitly quits the script.
#
#                    -= Scenario 2 =-
# When arguments are provided to this routing hub, run
# sub-scripts immediately and pass corresponding arguments.
#
# On sub-script completion, return to display a list of
# available options.
#


###########################################################
#
# Variables
#
CFG_HOST="config/hosts";
declare -A FLAG=( \
          [ALL]=0 \
          [AUTOCLEAN]=0 \
          [DISABLE_TEST]=0 \
          [UPDATE]=0 \
          [UPGRADE]=0 \
          [UPGRADEDIST]=0 \
        );
declare CONNECT_TO=();
#FLAG[DISABLE_TEST]=0;


#######################################
#
# SOURCES
#
source common/arrayFUNC;


#######################################
#
# FUNCTIONS
#
declare -A FUNCTIONS;
for FILE in $( ls action ); do
    FUNCTIONS+=( \
        [$FILE]=$( \
            awk ' \
                BEGIN {FS="DESCRIPTION"} \
                /DESCRIPTION/ {print $2}' \
            action/$FILE) );
done

#######################################
#
# FUNCTIONS enumerated and sorted
#
declare ENUMFUNC=( $( arrayENUM "${!FUNCTIONS[@]}" ) );
#declare ENUMFUNC;
#while IFS= read -rd '' FUNCTION; do
#    ENUMFUNC+=("$FUNCTION");
#done < <(printf '%s\0' "${!FUNCTIONS[@]}" | sort -z);

#######################################
#
# HOSTS
#
declare -A HOSTS;
if [[ -f common/readCFG ]]; then
    source common/readCFG;
    readCFG;
else
    clear;
    echo ">>>>> Error: configuration not found <<<<<";
    sleep 1;
    exit 1;
fi

#######################################
#
# HOSTS enumerated and sorted
#
declare ENUMSRV=( $( arrayENUM "${!HOSTS[@]}" ) );
#declare ENUMSRV;
#while IFS= read -rd '' HOST; do
#    ENUMSRV+=("$HOST");
#done < <(printf '%s\0' "${!HOSTS[@]}" | sort -z);


###########################################################
#
# printScreen
#
# Construct and display a list of options, available to the
# user. Let user select an option and proceed accordingly.
#
function printScreen()
{
    clear;

    local STR SELECTOR;
    SELECTOR=${1:-0}

    STR+="Remote System Management\n\n";
    for COUNT in "${!ENUMFUNC[@]}"; do
        # Array indexes are zero-based, which is not
        # truly human-friendly, thus first increase
        # the COUNT, but to reflect correct array
        # KEY/VALUE, it shall be decreased back
        STR+="$((++COUNT)) - ${FUNCTIONS[${ENUMFUNC[$((--COUNT))]}]}\n";
    done
    STR+="Q - Quit\n ";

    echo -e $STR;

    if [[ ${FLAG[AUTOCLEAN]} -eq 1 ]]; then
        SELECTOR=$( getKEYbyVAL "autoclean" "${ENUMFUNC[@]}" );
    elif [[ ${FLAG[CONNECT]} -eq 1 ]]; then
        SELECTOR=$( getKEYbyVAL "connect" "${ENUMFUNC[@]}" );
    elif [[ ${FLAG[UPDATE]} -eq 1 ]]; then
        SELECTOR=$( getKEYbyVAL "update" "${ENUMFUNC[@]}" );
    elif [[ ${FLAG[UPGRADE]} -eq 1 ]]; then
        SELECTOR=$( getKEYbyVAL "upgrade" "${ENUMFUNC[@]}" );
    elif [[ ${FLAG[UPGRADEDIST]} -eq 1 ]]; then
        SELECTOR=$( getKEYbyVAL "upgradedist" "${ENUMFUNC[@]}" );
    else
        read -p "Your selection: " SELECTOR;
    fi

    if [[ $SELECTOR -gt 0 && $SELECTOR -le ${#ENUMFUNC[@]} ]]; then

        # Indexes are zero-based, decrement SELECTOR
        ((--SELECTOR));

        # Correct option is selected, load sub-script
        # Run its printScreen$SUBSCRIPT function
        # On sub-script exit, re-run local script or exit
        local FILE="action/${ENUMFUNC[$SELECTOR]}";
        local FUNC="printScreen"$( echo ${ENUMFUNC[$SELECTOR]^^} );
        if [[ -f $FILE ]]; then
            source $FILE;
            $FUNC;
            [[ $? -ne 0 ]] && echo ">>>>> Error: unknown error <<<<<";
            ${FUNCNAME[0]};
        else
            echo ">>>>> Error: $FILE sub-script file not found <<<<<";
            exit $?;
        fi

    elif [[ "$SELECTOR" =~ [Qq] ]]; then

        # User requested exit
        clear;
        exit 0;

    else

        # Wrong option selected or omitted
        # Inform, sleep for a while, re-run self
        echo "Choose options 1 through ${#ENUMFUNC[@]} or \"Q\" to exit."
        sleep 3;
        ${FUNCNAME[0]};

    fi
}


###########################################################
#
# Arguments
#
if [[ $# -gt 0 ]]; then

    OPTIONS=$( getopt \
               --options cu \
               --longoptions all,autoclean,connect,no-ping,update,upgrade,dist-upgrade \
               --name "$(basename "$0")" \
               -- "$@" );

    eval set -- $OPTIONS;

    while true
    do
        case "$1" in

            --all)
              # Apply action to all hosts
              FLAG[ALL]=1;
              ;;

            --autoclean)
              # Skip Main screen and load autoclean screen
              FLAG[AUTOCLEAN]=1;
              ;;

            -c|--connect)
              # Skip Main screen and load Connection screen
              FLAG[CONNECT]=1;
              ;;

#            --connect-to)
#              # Direct connection to specified remote host
#              FLAG[CONNECT]=1;
#              while true
#              do
#                  CONNECT_TO+=( $2 );
#                  shift;
#              done
#              shift;
#              ;;

            --no-ping)
              # Disable PING test
              FLAG[DISABLE_TEST]=1;
              ;;

            -u|--update)
              # Skip Main screen and load package tree update screen
              FLAG[UPDATE]=1;
              ;;

            --upgrade)
              # Skip Main screen and load package upgrade screen
              FLAG[UPGRADE]=1;
              ;;

            --dist-upgrade)
              # Skip Main screen and load system package upgrade screen
              FLAG[UPGRADEDIST]=1;
              ;;

            --)
              shift;
              break;
              ;;

        esac

        shift;

    done

fi

printScreen;

exit $?
